{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["'use strict';\n\nimport * as cheerio from 'cheerio';\nimport { extname } from 'path';\nimport { parse as parseUrl } from 'url';\n\n/**\n * Debug namespace\n * @type {string}\n */\nconst DEBUG_NAMESPACE = 'metalsmith-safe-links';\n\n/**\n * Check if a file is an HTML file\n * @param {string} filePath - Path to check\n * @returns {boolean} True if file is HTML\n */\nconst isHTMLFile = (filePath) => /\\.html$|\\.htm$/i.test(extname(filePath));\n\n/**\n * Metalsmith plugin to process all site links:\n * 1. Strips protocol and hostname from links to local sites\n * 2. Adds target=\"_blank\" and rel=\"noopener noreferrer\" to external links\n *\n * @param {Object} options - Plugin options\n * @param {string[]} options.hostnames - Array of hostnames considered \"local\"\n * @returns {Function} Metalsmith plugin function\n */\nconst safeLinks = (options = {}) => {\n  // Set default options\n  const opts = {\n    hostnames: [],\n    ...options\n  };\n\n  // Validate required options\n  if (!opts.hostnames.length) {\n    console.warn(`${DEBUG_NAMESPACE}: Missing hostnames array. Plugin will not process any files.`);\n    return (files, metalsmith, done) => done();\n  }\n\n  // Store hostnames for faster lookups\n  const hostnames = new Set(opts.hostnames);\n\n  /**\n   * Process files\n   * @param {Object} files - Metalsmith files object\n   * @param {Object} metalsmith - Metalsmith instance\n   * @param {Function} done - Callback function\n   */\n  return (files, metalsmith, done) => {\n    // Use metalsmith's built-in debug if available\n    const debug = metalsmith.debug ? metalsmith.debug(DEBUG_NAMESPACE) : () => {};\n    debug('Processing links with options: %o', opts);\n\n    // Get HTML files only\n    const htmlFiles = Object.keys(files).filter(isHTMLFile);\n\n    if (htmlFiles.length === 0) {\n      debug('No HTML files found to process');\n      return setImmediate(done);\n    }\n\n    debug(`Processing ${htmlFiles.length} HTML files`);\n\n    // Process each HTML file\n    htmlFiles.forEach((file) => {\n      const contents = files[file].contents.toString();\n\n      // Load content into cheerio\n      const $ = cheerio.load(contents, {\n        decodeEntities: false\n      });\n\n      // Process all links\n      let linkCount = 0;\n      let localLinkCount = 0;\n      let externalLinkCount = 0;\n\n      $('a').each(function () {\n        const thisLink = $(this);\n        const linkAttributes = thisLink[0].attribs;\n        const href = linkAttributes.href;\n\n        if (!href || typeof href !== 'string') {\n          return;\n        }\n\n        linkCount++;\n\n        // Parse URL\n        try {\n          const urlData = parseUrl(href, true);\n\n          // Only process links with protocol and hostname\n          if (urlData.protocol && urlData.hostname) {\n            // Check if hostname is in our \"local\" list\n            if (hostnames.has(urlData.hostname)) {\n              // Strip protocol and hostname from local link\n              localLinkCount++;\n              debug('Converting local link: %s to %s', href, urlData.pathname);\n              thisLink.attr('href', urlData.pathname);\n            } else {\n              // Add target and rel to external link\n              externalLinkCount++;\n              debug('Adding target and rel to external link: %s', href);\n              thisLink.attr('target', '_blank');\n              thisLink.attr('rel', 'noopener noreferrer');\n            }\n          }\n        } catch (err) {\n          debug('Error parsing URL %s: %s', href, err.message);\n        }\n      });\n\n      // Save statistics\n      debug(`File ${file}: processed ${linkCount} links (${localLinkCount} local, ${externalLinkCount} external)`);\n\n      // Update file contents\n      files[file].contents = Buffer.from($.html());\n    });\n\n    setImmediate(done);\n  };\n};\n\n// ESM export\nexport default safeLinks;\n\n// CommonJS export compatibility (will be transformed by microbundle)\nif (typeof module !== 'undefined') {\n  module.exports = safeLinks;\n}\n"],"names":["DEBUG_NAMESPACE","isHTMLFile","filePath","test","extname","safeLinks","options","opts","hostnames","length","console","warn","files","metalsmith","done","Set","debug","htmlFiles","Object","keys","filter","setImmediate","forEach","file","contents","toString","$","cheerio","load","decodeEntities","linkCount","localLinkCount","externalLinkCount","each","thisLink","linkAttributes","attribs","href","urlData","parseUrl","protocol","hostname","has","pathname","attr","err","message","Buffer","from","html","module","exports"],"mappings":";;;;AAMA;AACA;AACA;AACA;AACA,MAAMA,eAAe,GAAG,uBAAuB,CAAA;;AAE/C;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,GAAIC,QAAQ,IAAK,iBAAiB,CAACC,IAAI,CAACC,OAAO,CAACF,QAAQ,CAAC,CAAC,CAAA;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,SAAS,GAAGA,CAACC,OAAO,GAAG,EAAE,KAAK;AAClC;AACA,EAAA,MAAMC,IAAI,GAAG;AACXC,IAAAA,SAAS,EAAE,EAAE;IACb,GAAGF,OAAAA;GACJ,CAAA;;AAED;AACA,EAAA,IAAI,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,EAAE;AAC1BC,IAAAA,OAAO,CAACC,IAAI,CAAC,CAAGX,EAAAA,eAAe,+DAA+D,CAAC,CAAA;IAC/F,OAAO,CAACY,KAAK,EAAEC,UAAU,EAAEC,IAAI,KAAKA,IAAI,EAAE,CAAA;AAC5C,GAAA;;AAEA;EACA,MAAMN,SAAS,GAAG,IAAIO,GAAG,CAACR,IAAI,CAACC,SAAS,CAAC,CAAA;;AAEzC;AACF;AACA;AACA;AACA;AACA;AACE,EAAA,OAAO,CAACI,KAAK,EAAEC,UAAU,EAAEC,IAAI,KAAK;AAClC;AACA,IAAA,MAAME,KAAK,GAAGH,UAAU,CAACG,KAAK,GAAGH,UAAU,CAACG,KAAK,CAAChB,eAAe,CAAC,GAAG,MAAM,EAAE,CAAA;AAC7EgB,IAAAA,KAAK,CAAC,mCAAmC,EAAET,IAAI,CAAC,CAAA;;AAEhD;AACA,IAAA,MAAMU,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACP,KAAK,CAAC,CAACQ,MAAM,CAACnB,UAAU,CAAC,CAAA;AAEvD,IAAA,IAAIgB,SAAS,CAACR,MAAM,KAAK,CAAC,EAAE;MAC1BO,KAAK,CAAC,gCAAgC,CAAC,CAAA;MACvC,OAAOK,YAAY,CAACP,IAAI,CAAC,CAAA;AAC3B,KAAA;AAEAE,IAAAA,KAAK,CAAC,CAAcC,WAAAA,EAAAA,SAAS,CAACR,MAAM,aAAa,CAAC,CAAA;;AAElD;AACAQ,IAAAA,SAAS,CAACK,OAAO,CAAEC,IAAI,IAAK;MAC1B,MAAMC,QAAQ,GAAGZ,KAAK,CAACW,IAAI,CAAC,CAACC,QAAQ,CAACC,QAAQ,EAAE,CAAA;;AAEhD;AACA,MAAA,MAAMC,CAAC,GAAGC,OAAO,CAACC,IAAI,CAACJ,QAAQ,EAAE;AAC/BK,QAAAA,cAAc,EAAE,KAAA;AAClB,OAAC,CAAC,CAAA;;AAEF;MACA,IAAIC,SAAS,GAAG,CAAC,CAAA;MACjB,IAAIC,cAAc,GAAG,CAAC,CAAA;MACtB,IAAIC,iBAAiB,GAAG,CAAC,CAAA;AAEzBN,MAAAA,CAAC,CAAC,GAAG,CAAC,CAACO,IAAI,CAAC,YAAY;AACtB,QAAA,MAAMC,QAAQ,GAAGR,CAAC,CAAC,IAAI,CAAC,CAAA;AACxB,QAAA,MAAMS,cAAc,GAAGD,QAAQ,CAAC,CAAC,CAAC,CAACE,OAAO,CAAA;AAC1C,QAAA,MAAMC,IAAI,GAAGF,cAAc,CAACE,IAAI,CAAA;AAEhC,QAAA,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;AACrC,UAAA,OAAA;AACF,SAAA;AAEAP,QAAAA,SAAS,EAAE,CAAA;;AAEX;QACA,IAAI;AACF,UAAA,MAAMQ,OAAO,GAAGC,KAAQ,CAACF,IAAI,EAAE,IAAI,CAAC,CAAA;;AAEpC;AACA,UAAA,IAAIC,OAAO,CAACE,QAAQ,IAAIF,OAAO,CAACG,QAAQ,EAAE;AACxC;YACA,IAAIjC,SAAS,CAACkC,GAAG,CAACJ,OAAO,CAACG,QAAQ,CAAC,EAAE;AACnC;AACAV,cAAAA,cAAc,EAAE,CAAA;cAChBf,KAAK,CAAC,iCAAiC,EAAEqB,IAAI,EAAEC,OAAO,CAACK,QAAQ,CAAC,CAAA;cAChET,QAAQ,CAACU,IAAI,CAAC,MAAM,EAAEN,OAAO,CAACK,QAAQ,CAAC,CAAA;AACzC,aAAC,MAAM;AACL;AACAX,cAAAA,iBAAiB,EAAE,CAAA;AACnBhB,cAAAA,KAAK,CAAC,4CAA4C,EAAEqB,IAAI,CAAC,CAAA;AACzDH,cAAAA,QAAQ,CAACU,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;AACjCV,cAAAA,QAAQ,CAACU,IAAI,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAAA;AAC7C,aAAA;AACF,WAAA;SACD,CAAC,OAAOC,GAAG,EAAE;UACZ7B,KAAK,CAAC,0BAA0B,EAAEqB,IAAI,EAAEQ,GAAG,CAACC,OAAO,CAAC,CAAA;AACtD,SAAA;AACF,OAAC,CAAC,CAAA;;AAEF;MACA9B,KAAK,CAAC,CAAQO,KAAAA,EAAAA,IAAI,CAAeO,YAAAA,EAAAA,SAAS,WAAWC,cAAc,CAAA,QAAA,EAAWC,iBAAiB,CAAA,UAAA,CAAY,CAAC,CAAA;;AAE5G;AACApB,MAAAA,KAAK,CAACW,IAAI,CAAC,CAACC,QAAQ,GAAGuB,MAAM,CAACC,IAAI,CAACtB,CAAC,CAACuB,IAAI,EAAE,CAAC,CAAA;AAC9C,KAAC,CAAC,CAAA;IAEF5B,YAAY,CAACP,IAAI,CAAC,CAAA;GACnB,CAAA;AACH,EAAC;;AAKD;AACA,IAAI,OAAOoC,MAAM,KAAK,WAAW,EAAE;EACjCA,MAAM,CAACC,OAAO,GAAG9C,SAAS,CAAA;AAC5B;;;;"}