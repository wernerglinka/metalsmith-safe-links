{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["'use strict';\n\nimport * as cheerio from 'cheerio';\nimport { extname } from 'path';\nimport { parse as parseUrl } from 'url';\n\n/**\n * Debug namespace\n * @type {string}\n */\nconst DEBUG_NAMESPACE = 'metalsmith-safe-links';\n\n/**\n * Check if a file is an HTML file\n * @param {string} filePath - Path to check\n * @returns {boolean} True if file is HTML\n */\nconst isHTMLFile = ( filePath ) => /\\.html$|\\.htm$/i.test( extname( filePath ) );\n\n/**\n * Process a single URL element\n * @param {Object} params - Processing parameters\n * @param {Object} params.element - Cheerio element\n * @param {string} params.attr - Attribute name (href, src, etc.)\n * @param {string} params.url - URL to process\n * @param {boolean} params.isAnchor - Whether this is an anchor element\n * @param {Set} params.hostnames - Set of local hostnames\n * @param {Object} params.opts - Plugin options\n * @param {Function} params.debug - Debug function\n * @returns {Object} Processing stats\n */\nconst processUrlElement = ( { element, attr, url, isAnchor, hostnames, opts, debug } ) => {\n  let localCount = 0;\n  let externalCount = 0;\n\n  // Skip handling of special link types (only for anchors)\n  if ( isAnchor && ( url.startsWith( '#' ) || url.startsWith( 'mailto:' ) || url.startsWith( 'tel:' ) ) ) {\n    debug( 'Skipping special link: %s', url );\n    return { localCount, externalCount };\n  }\n\n  // Parse URL\n  try {\n    const urlData = parseUrl( url, true );\n\n    // Only process links with protocol and hostname\n    if ( urlData.protocol && urlData.hostname ) {\n      // Check if hostname is in our \"local\" list\n      if ( hostnames.has( urlData.hostname ) ) {\n        // Strip protocol and hostname from local link, prepend base path if provided\n        localCount++;\n        const pathWithQuery = ( urlData.path || urlData.pathname || '' ) + ( urlData.hash || '' );\n        const newUrl = opts.basePath ? `/${ opts.basePath }${ pathWithQuery }` : pathWithQuery;\n        debug( 'Converting local %s: %s to %s', attr, url, newUrl );\n        element.attr( attr, newUrl );\n      } else if ( isAnchor ) {\n        // Add target and rel to external anchor links only\n        externalCount++;\n        debug( 'Adding target and rel to external link: %s', url );\n        element.attr( 'target', '_blank' );\n        element.attr( 'rel', 'noopener noreferrer' );\n      }\n    }\n  } catch ( err ) {\n    debug( 'Error parsing URL %s: %s', url, err.message );\n  }\n\n  return { localCount, externalCount };\n};\n\n/**\n * Metalsmith plugin to process all site URLs across HTML elements:\n * 1. Strips protocol and hostname from URLs to local sites (all elements)\n * 2. Adds target=\"_blank\" and rel=\"noopener noreferrer\" to external anchor links\n * 3. Supports base path prepending for subdirectory deployments\n * \n * Processes URLs in: <a href>, <link href>, <script src>, <img src>, <iframe src>,\n * <source src>, <embed src>, <track src>, <form action>, <object data>, <video poster>, <area href>\n *\n * @param {Object} options - Plugin options\n * @param {string[]} options.hostnames - Array of hostnames considered \"local\"\n * @param {string} options.basePath - Base path for the site (e.g., \"base-path\" for sites deployed in subdirectories)\n * @returns {Function} Metalsmith plugin function\n */\nconst safeLinks = ( options = {} ) => {\n  // Set default options\n  const opts = {\n    hostnames: [],\n    basePath: '',\n    ...options\n  };\n\n  // Validate required options\n  if ( !opts.hostnames.length ) {\n    console.warn( `${ DEBUG_NAMESPACE }: Missing hostnames array. Plugin will not process any files.` );\n    return ( files, metalsmith, done ) => {\n      setImmediate( done );\n    };\n  }\n\n  // Store hostnames for faster lookups\n  const hostnames = new Set( opts.hostnames );\n\n  /**\n   * Process files\n   * @param {Object} files - Metalsmith files object\n   * @param {Object} metalsmith - Metalsmith instance\n   * @param {Function} done - Callback function\n   */\n  return ( files, metalsmith, done ) => {\n    // Use metalsmith's built-in debug if available\n    const debug = metalsmith.debug( DEBUG_NAMESPACE );\n    debug( 'Processing links with options: %o', opts );\n\n    // Get HTML files only\n    const htmlFiles = Object.keys( files ).filter( isHTMLFile );\n\n    if ( htmlFiles.length === 0 ) {\n      debug( 'No HTML files found to process' );\n      return setImmediate( done );\n    }\n\n    debug( `Processing ${ htmlFiles.length } HTML files` );\n\n    // Process each HTML file\n    htmlFiles.forEach( ( file ) => {\n      const contents = files[ file ].contents.toString();\n\n      // Load content into cheerio\n      const $ = cheerio.load( contents, {\n        decodeEntities: false\n      } );\n\n      // Process all elements with URL attributes\n      let linkCount = 0;\n      let localLinkCount = 0;\n      let externalLinkCount = 0;\n\n      // Define elements and their URL attributes to process\n      const urlSelectors = [\n        { selector: 'a[href]', attr: 'href', isAnchor: true },\n        { selector: 'link[href]', attr: 'href', isAnchor: false },\n        { selector: 'area[href]', attr: 'href', isAnchor: false },\n        { selector: 'script[src]', attr: 'src', isAnchor: false },\n        { selector: 'img[src]', attr: 'src', isAnchor: false },\n        { selector: 'iframe[src]', attr: 'src', isAnchor: false },\n        { selector: 'source[src]', attr: 'src', isAnchor: false },\n        { selector: 'embed[src]', attr: 'src', isAnchor: false },\n        { selector: 'track[src]', attr: 'src', isAnchor: false },\n        { selector: 'form[action]', attr: 'action', isAnchor: false },\n        { selector: 'object[data]', attr: 'data', isAnchor: false },\n        { selector: 'video[poster]', attr: 'poster', isAnchor: false }\n      ];\n\n      // Process each selector type\n      urlSelectors.forEach( ( { selector, attr, isAnchor } ) => {\n        $( selector ).each( function() {\n          const element = $( this );\n          const elementAttributes = element[ 0 ].attribs;\n          const url = elementAttributes[ attr ];\n\n          if ( !url || typeof url !== 'string' ) {\n            return;\n          }\n\n          linkCount++;\n\n          // Process the URL element\n          const { localCount, externalCount } = processUrlElement( { element, attr, url, isAnchor, hostnames, opts, debug } );\n          localLinkCount += localCount;\n          externalLinkCount += externalCount;\n        } );\n      } );\n\n      // Save statistics\n      debug( `File ${ file }: processed ${ linkCount } links (${ localLinkCount } local, ${ externalLinkCount } external)` );\n\n      // Update file contents\n      files[ file ].contents = Buffer.from( $.html() );\n    } );\n\n    setImmediate( done );\n  };\n};\n\n// ESM export\nexport default safeLinks;\n\n// CommonJS export compatibility (will be transformed by microbundle)\nif ( typeof module !== 'undefined' ) {\n  module.exports = safeLinks;\n}\n"],"names":["DEBUG_NAMESPACE","isHTMLFile","filePath","test","extname","processUrlElement","element","attr","url","isAnchor","hostnames","opts","debug","localCount","externalCount","startsWith","urlData","parseUrl","protocol","hostname","has","pathWithQuery","path","pathname","hash","newUrl","basePath","err","message","safeLinks","options","length","console","warn","files","metalsmith","done","setImmediate","Set","htmlFiles","Object","keys","filter","forEach","file","contents","toString","$","cheerio","load","decodeEntities","linkCount","localLinkCount","externalLinkCount","urlSelectors","selector","each","elementAttributes","attribs","Buffer","from","html","module","exports"],"mappings":"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"}